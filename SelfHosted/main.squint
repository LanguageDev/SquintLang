import System.Console.WriteLine;

type Lexer(val Text: string, var Offset: int);

#[derive(ToString)]
type Token(val Text: string);

impl Lexer {
    // NOTE: Named arguments would be really nice here
    // Maybe Lexer(Text = text, Offset = 0) ?
    func new(text: string): Lexer = Lexer(text, 0);

    func next(this): Token {
        var start = this.Offset;

        func is_end(): bool = this.Offset >= this.Text.Length;
        func current(): char = this.Text[this.Offset];
        func step() = this.Offset += 1;

        func consume_while(pred: (char) -> bool) {
            while not is_end() and pred(current()) do step();
        }

        func skip() = start = this.Offset;
        func take(): string {
            var text = this.Text.Substring(start, this.Offset - start);
            start = this.Offset;
            return text;
        }

        func is_ident(ch: char): bool = char.IsLetterOrDigit(ch) or ch == '_';

    begin:
        // EOF
        if is_end() then return Token("<EOF>");

        // Space
        if char.IsWhiteSpace(current()) then {
            consume_while(char.IsWhiteSpace);
            skip();
            goto begin;
        }
        // Integer literal
        if char.IsDigit(current()) then {
            consume_while(char.IsDigit);
            return Token(take());
        }
        // Identifier
        if is_ident(current()) then {
            consume_while(is_ident);
            return Token(take());
        }
        // Unknown
        step();
        return Token(take());
    }
}

func main() {
    val lexer = Lexer.new("hello world 123 hi_3");
    while true do {
        var token = lexer.next();
        WriteLine(token);
        if token.Text == "<EOF>" then goto break;
    }
}
